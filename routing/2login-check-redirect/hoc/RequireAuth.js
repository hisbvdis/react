// ========================================================================
// HOC, проверяющий авторизованность (если нет — переадресует)
// ========================================================================

// 1. Импортировать зависимости
// 1.1. Хук, обеспечивающий доступ к контексту "AuthContext"
import { useAuth } from "../hooks/useAuth.js";
// 1.2. Хук переадресации
import { useNavigate } from "react-router-dom";
// 1.3. Хук получения данных "URL и состояния"
import { useLocation } from "react-router-dom";
// 1.4. Хук вызова при обновлении компонента
import { useEffect } from "react";


// 2. Создать HOC
const RequireAuth = ({children}) => {
  // 2.1. Получить данные "URL и состояния" текущей страницы
  const location = useLocation();
  // 2.2. Создать функцию навигации
  const navigate = useNavigate();
  // 2.3. Получить переменную с текущим статусом "авторизованности"
  const { isAuth } = useAuth();
  
  // 2.4. Если пользователь не авторизован, перевести его на страницу
  // .... авторизации (в "state" данные о текущей странице)
  useEffect(() => {
    if (!isAuth) {
      // 2.5. Если просто переадресовать, то при нажатии на странице авторизации
      // ..кнопки "Назад", будет переход на защищённый адрес "/admin",
      // ..с которого снова будет переадресация на "/login"
      // Поэтому нужно добавить "replace: true", чтобы заменило запись в истории
      navigate("/login", {state: {from: location}, replace: true});
    }
  }, [])

  // 2.6. Если пользователь авторизован — показать дочерний компонент. Тот,
  // .... который в файле "App.js" был вложен внутрь компонента <RequireAuth/>
  return (<>
    { children }
  </>)
}

export default RequireAuth;